{
  "name": "dutie",
  "version": "1.0.0",
  "description": "Create scheduling task managers to perform tasks with prerequisites and priorities",
  "main": "index.js",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/demipixel/dutie.git"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {},
  "bugs": {
    "url": "https://github.com/demipixel/dutie/issues"
  },
  "homepage": "https://github.com/demipixel/dutie",
  "keywords": [
    "dutie",
    "priority",
    "schedule",
    "manager",
    "task"
  ],
  "author": {
    "name": "Lucas Simon",
    "email": "luke5227@gmail.com"
  },
  "readme": "# dutie\nTask Scheduling for Node.js!\n\n# Installing\n```\nnpm install dutie // Some day, but this doesn't actually work yet\n```\n\n# Task Manager\n\nNOT BEFORE YOU START USING THIS:\n\nALL PARAMATERS MUST BE OBJECTS. IF IT IS A NUMBER, DO SOMETHING LIKE { num: 2 } TO CONTAIN 2. I apologize for the inconvenience. If you know of another way for Arrays to contain pointers for primitives, please notify me :)\n\n```js\nvar Dutie = require('dutie');\n```\n## Variables\n### Dutie.tasks\nArray of tasks waiting to be called.\nThis sorts itself by priority when choosing next task. Don't expect it to be sorted any other time.\n\n### Dutie.currentTask\nCurrent Task object that is running.\n\n## Methods\n### Dutie.init()\nJust calls Dutie.update() which will recognize it has no task and needs to get one.\nIt's pretty much just for the looks.\n\n### Dutie.add(Task)\nAdd the task to Dutie.tasks\nWill checkAll to see if there are any changes or if the current one needs to be cancelled.\n\n### Dutie.update()\nUpdate the current task. This will run anything in it's update method. If the update method return true, is will finish the task and try and get the next one.\nIf finishing, will pass false to the cancel paramater in the finish method.\n\n### Dutie.finish()\nForce-finishes the task but still calls the task's Finish method. Bypasses whatever decision update() would have made.\nIt will then decide what task is next.\nWill pass \"true\" to the cancel paramater in the finish method.\n\n### Dutie.cancel()\nCalls the Task.finish(true), then adds it back to the list.\nWARNING: This will leave currentTask as null unless you do something about it!\nYou're probably not gonna use this one since we take care of priority canceling.\n\n### Dutie.endTask()\nMurder the current task. Guillotine it and don't call its finish. Still replaces itself.\nI don't recommend killing your fellow tasks. Just use finish even if you don't have a finish method.\n\n### Dutie.checkAll()\nCalls Task.check() on every task. This COULD change the current task if a Task.check() passes true and has a higher priority than the current Task!\nEvery task is checked when deciding the next Task, so don't worry about it if you don't have to.\n\n\n# Tasks\n```js\nvar Task = Dutie.Task\n```\n### Task.depend\nAn array of Tasks it depends on to finish. Tasks will be removed from the list if they have finished/failed/ended\nThe Task cannot execute until this array is empty.\n\n### TaskA.dependOn(TaskB)\nWill push TaskB to TaskA.depend\n\n### Task.update()\nUpdate method that you pass. Change if you must... or just write a better update method that you don't have to change.\nThe update method gets called whenever you wants to. It allows you to complete your action or return true to end it.\n\n### Task.updateParams\nArray of params to be called with each update. This is why you do Dutie.update() instead of Task.update().\nSilly goose.\n\n### Task.finish\nWhen a task finishes (if you weren't silly enough to use Dutie.endTask()) this method will be called.\n**IMPORTANT:** The \"cancel\" paramater comes before any of your custom paramaters. This means if you have:\n[a, b, c] in your finishParams, it will call Task.finish(cancel, a, b, c). Thank you for your time :)\n\n### Task.finishParams\nSame as Task.updateParams but for finish. Remember that important note in Task.finish.\nSilly goose.\n\n### Task.check\nMethod that is run to check if you can execute the task.\nThis is if you want to depend on something that is not a task.\nIf you want to be able to execute the task, return true.\n\n### Task.checkParams\nWhat do you think. It's Task.finishParams for check.\nSilly. Goose.\n\n\n\n\n### new Task(update, updateParam, options)\nCongrats! You've created your new Task object! But what do you put in it?\n\n#### update\nThis is your update method! Put in here what you'd like to do during your task. Once your task is complete, return true!\n\n#### updateParam\nYour update is going to be called with these paramaters, just for you. Make them count!\nJust in case you're wondering: this is an array.\n\n#### priority\nExplained in other places. Prioritises which task should be executed first.\n\n#### actPriority\nAlso explained it other places. How much priority it has while executing.\n\n#### Options\nAlright, you've made it this far. What are the options?\n\n##### priority\nDefault is 0.\nRecommended that you set it. Will come before any other task with a lower priority.\nWill even bump current task down if it has a lower act-priority.\nThink of this as \"how important is it that the task starts\".\n\n##### actPriority\nDefault is 0.\nShort for \"active priority\". This is normally higher than priority, as it is how much priority the task has when executing.\nRemember, anything with a higher priority could cancel this, so sets this high if you shouldn't / can't stop it.\nThink of this as \"how important is it that the task finishes now\"\n\n##### finish\nDefault is undefined, will not run anything.\nWhat do you want to have happen when update returns true and the task finishes. Your first param will be false, the others being the paramaters you created.\nWAIT, THAT'S NOT ALL! If your task gets cancelled, your update won't know about it! This means that finish will pass the first paramater (\"cancel\") to be true so you know to clean up after yourself if you get cancelled.\n\n##### finishParms\nI don't think I need to explain this one. check Task.finishParams. IT'S AN ARRAY\n\n##### check\nNot needed if it has no prerequisites.\nSee Task.check\n\n##### checkParams\nYou've got to be joking.\n\n##### EXAMPLE TIME\nLet's say you have a Minecraft bot that needs to mine ore and then go home but then runs into a zombie!\n```js\nvar Dutie = require('dutie');\nvar Task = Dutie.Task;\n\nvar Manager = new Dutie();\n\nvar mine = new Task(mineOreFunction, [], { priority: 3, actPriority: 6, finish: function(bot) {\n\tbot.stopMining();\n\tbot.navigate.stop();\n}, finishParam: [bot]}); // Mine ore task\nvar home = new Task(goHomeFunction, [true], { priority: 4, actPriority: 8}); // Go home task, passing \"true\" paramater as an example\nhome.dependOn(mine); // Bot cannot go home until it finishes mining (or mining fails / ends)\n\nManager.add(mine).add(home);\n\n/////////////// / / /\n/// Somewhere else\n/////////////// / / /\n\nvar zombie = new Task(killZombieFunction, [], { priority: 20, actPriority: 20});\nManager.add(zombie); // Will now cancel the mine task, adding it back into the line, and make zombie the current (since it has a higher priority then mine's actPriority)\n\n/////////////// / / /  /   /   /\n/// Somewhere else... again...\n/////////////// / / /  /   /   /\n\n// Let's sleep when we get home\n// We don't know if there's a home task or not though (or we don't remember which one)\n// Instead, we give a \"check\" with makes it dependent on something other than a task.\n\nvar sleep = new Task(goToSleep, ['home'], { priority: 3, actPriority: 3, check: function(bot) {\n\tif (bot.position.atHome()) return true;\n\treturn false;\n}, checkParams: [bot]});\nManager.add(sleep);\n\nManager.checkAll(); // This is automatically called at the end of a task, at a cancel, etc, but feel free to call it yourself if you need to\n// Returns false because not at home.\n\n// Even if it does return true, it needs to have a higher priority than actPriority to overtake\n// Or it needs the highest priority in the list at the end of a task.\n```",
  "readmeFilename": "README.md",
  "gitHead": "3dd5d58358151242c72564f699869c061a4e624e",
  "_id": "dutie@1.0.0",
  "_shasum": "0e3db7532cb6b409a4c380471b8ba5c25f568a60",
  "_from": "dutie@"
}
