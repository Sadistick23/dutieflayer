{
  "name": "mineflayer-blockfinder",
  "version": "0.0.5",
  "description": "mineflayer plugin which gives bots a function to find the nearest block",
  "main": "index.js",
  "scripts": {
    "test": ""
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Darthfett/mineflayer-blockfinder.git"
  },
  "keywords": [
    "minecraft",
    "mineflayer",
    "bot",
    "block",
    "finder"
  ],
  "author": {
    "name": "Darthfett"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "a2f8d6963512aa00d0dc4693badb74fa908976b4",
  "readme": "# mineflayer-blockfinder\n\nA library to help your mineflayer bot find blocks in the 3D world.\n\nSee [mineflayer](https://github.com/superjoe30/mineflayer/).\n\n## Usage\n\n```js\nvar mineflayer = require('mineflayer');\nvar blockFinderPlugin = require('mineflayer-blockfinder')(mineflayer);\nvar bot = mineflayer.createBot({username: 'Player'});\n\n// Install the plugin\nblockFinderPlugin(bot);\n\n// Sample usage\nbot.once('spawn', function() {\n  bot.findBlock({\n    point: bot.entity.position,\n    matching: 56,\n    maxDistance: 256,\n    count: 1,\n  }, function(err, blockPoints) {\n    if (err) {\n      return bot.chat('Error trying to find Diamond Ore: ' + err);\n      bot.quit('quitting');\n      return;\n    }\n    if (blockPoints.length) {\n      bot.chat('I found a Diamond Ore block at ' + blockPoints[0] + '.');\n      bot.quit('quitting');\n      return;\n    } else {\n      bot.chat(\"I couldn't find any Diamond Ore blocks within 256.\");\n      bot.quit('quitting');\n      return;\n    }\n  });\n});\n```\n\n## Documentation\n\n### bot.findBlock(options, callback)\n\nFinds the nearest block(s) to the given point.\n * `options` - Additional options for the search:\n   - `point` - The start position of the search.\n   - `matching` - A function that returns true if the given block is a match.  Also supports this value being a block id or array of block ids.\n   - `maxDistance` - The furthest distance for the search, defaults to 64.\n   - `count` - The number of blocks to find at most, defaults to 1.\n * `callback` - A callback function to get the result.  Function signature:\n\n```\nfunction(err, arrayOfPoints)\n```\n\n### bot.findBlockSync(options)\n\nFinds the nearest block(s) to the given point synchronously.\n * `options` - See `bot.findBlock`.\n\n## History\n\n### 0.0.5\n\n * Added new OctahedronIterator class, a fast finder algorithm that always returns the closest block, and is comparable with the cube algorithm.\n\n### 0.0.4\n\n * Reverted algorithm to use the old, fast cube algorithm.\n\n### 0.0.3\n\n * Fix 'matching' option to allow for array of ids instead of crashing.\n\n### 0.0.2\n\n * Refactored algorithm to use an Iterator approach, to allow for re-useable code.\n * Rewrote block finding algorithm to guarantee the closest block is always found first.\n * Matching argument now takes an array of block ids, instead of block enums.\n",
  "bugs": {
    "url": "https://github.com/Darthfett/mineflayer-blockfinder/issues"
  },
  "homepage": "https://github.com/Darthfett/mineflayer-blockfinder",
  "_id": "mineflayer-blockfinder@0.0.5",
  "_shasum": "19dc66a17f0c72094b10e36d12f53ea1db124e83",
  "_resolved": "git://github.com/rom1504/mineflayer-blockfinder.git#a250bf6fc97b96dcf5f795041e851a84c6ab2d27",
  "_from": "mineflayer-blockfinder@"
}
